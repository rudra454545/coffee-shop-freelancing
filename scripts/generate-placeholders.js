const fs = require('fs')
const path = require('path')

const checkScript = path.join(__dirname, 'check-images.js')
const menuPath = path.join(__dirname, '..', 'shake-sea', 'components', 'sections', 'menu.jsx')
const publicImgDir = path.join(__dirname, '..', 'public', 'img')

if (!fs.existsSync(publicImgDir)) fs.mkdirSync(publicImgDir, { recursive: true })

const content = fs.readFileSync(menuPath, 'utf8')
const regex = /image:\s*"(\/img\/[^"]+\.jpg)"/gmi
let match
const images = new Set()
while ((match = regex.exec(content)) !== null) {
  images.add(match[1])
}

let created = 0
for (const imgPath of images) {
  const filename = imgPath.replace(/^\/img\//, '')
  const namePart = filename.replace(/\.jpg$/i, '')
  if (/^\d+$/.test(namePart)) continue // skip numeric names per user

  const full = path.join(publicImgDir, filename)
  if (!fs.existsSync(full)) {
    // create a tiny valid JPEG (1x1 px) using a minimal JPEG header (binary)
    const jpeg = Buffer.from([
      0xff,0xd8,0xff,0xdb,0x00,0x43,0x00,
      // luminance table (partial) - this makes a minimal valid jpeg
      0x08,0x06,0x06,0x07,0x06,0x05,0x08,0x07,0x07,0x07,0x09,0x09,0x08,0x0a,0x0c,0x14,
      0x0d,0x0c,0x0b,0x0b,0x0c,0x19,0x12,0x13,0x0f,0x14,0x1d,0x1a,0x1f,0x1e,0x1d,0x1a,
      0x1c,0x1c,0x20,0x24,0x2e,0x27,0x20,0x22,0x2c,0x23,0x1c,0x1c,0x28,0x37,0x29,0x2c,
      0x30,0x31,0x34,0x34,0x34,0x1f,0x27,0x39,0x3d,0x38,0x32,0x3c,0x2e,0x33,0x34,0x32,
      0xff,0xc0,0x00,0x11,0x08,0x00,0x01,0x00,0x01,0x03,0x01,0x11,0x00,0x02,0x11,0x01,
      0x03,0x11,0x01,0xff,0xc4,0x00,0x14,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xda,0x00,0x0c,0x03,0x01,0x00,0x02,
      0x11,0x03,0x11,0x00,0x3f,0x00,0xd2,0xcf,0x20,0xff,0xd9
    ])
    fs.writeFileSync(full, jpeg)
    created++
  }
}

console.log('Created', created, 'placeholder images in', publicImgDir)
process.exit(0)
